#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "mathConst.glsl"

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

#ifdef BALSARA_SWITCH
layout(binding=PARTICLE_BALSARA_BUFFER_BINDING,std430) buffer ParticleBalsaraValues
{
    vec4 balsara[];
};
#endif

uniform float a;
uniform float ac1;
uniform float ac2;
uniform float frag_limit;

layout(local_size_variable) in;

void main()
{
    // sum up hydro and balsara values from other threads
    vec4 sumh = vec4(0);
#ifdef BALSARA_SWITCH
    vec4 sumb = vec4(0);
#endif

    for(uint i=0; i < HYDROS_PER_PARTICLE; i++)
    {
        const uint idxi = NUM_PARTICLES * i + gl_GlobalInvocationID.x;
        sumh += hydro[idxi];
#ifdef BALSARA_SWITCH
        sumb += balsara[idxi];
#endif
    }

// change adibatic constant based on density to mimic change in temperature
#ifdef ARTIFICIAL_HEATING
    const float ac = (sumh.DENSITY < frag_limit) ? ac1 : ac2;
#else
    const float ac = ac1;
#endif

    // calculate pressure and sound speed
    const float pressure = a * pow(sumh.DENSITY,ac);
    float ci = sqrt(ac*pressure/sumh.DENSITY);

// calculate the correction factor for pressure based on springel and hernquist 2002
#ifdef DH_DENSITY_CORRECTION
    const float hi = smlength[gl_GlobalInvocationID.x];
    const float dhDensFac = 1.0/(1.0+ hi * sumh.DH_DENSITY_FACTOR /(3*sumh.DENSITY));
#else
    const float dhDensFac = 1;
#endif

// calculate the balsara switch
#ifdef BALSARA_SWITCH
    const float vort = length(sumb.CURL) / sumh.DENSITY;
    const float div = abs( sumb.DIV / sumh.DENSITY );
    const float baSwitch = div / ( div + vort + 0.0001*ci/hi);
    balsara[gl_GlobalInvocationID.x].x = baSwitch;
#endif

    hydro[gl_GlobalInvocationID.x] = vec4(sumh.DENSITY, pressure, ci, dhDensFac);
}