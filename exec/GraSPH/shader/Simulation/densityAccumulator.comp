#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "mathConst.glsl"

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

uniform float a;
uniform float ac1;
uniform float ac2;
uniform float frag_limit;
#define DH_DENSITY_FACTOR
#define ARTIFICIAL_TEMPERATURE

layout(local_size_variable) in;

void main()
{
    // sum up hydro value from other threads
    vec4 sum = vec4(0);
    for(uint i=0; i < HYDROS_PER_PARTICLE; i++)
    {
        const vec4 hydroi = hydro[NUM_PARTICLES * i + gl_GlobalInvocationID.x];
        sum = vec4(sum.xyz + hydroi.xyz, hydroi.w);
    }

#ifdef DH_DENSITY_FACTOR // calculate the correction factor for pressure based on springel and hernquist 2002
    const float drhodh = (sum.y - sum.z) / (2*sum.w);
    const float dhDensFac = 1.0/(1.0+ smlength[gl_GlobalInvocationID.x] * drhodh / (3* sum.DENSITY));
#else
    const float dhDensFac = 1;
#endif

#ifdef ARTIFICIAL_TEMPERATURE // change adibatic constant based on density to mimic change in temperature
    const float ac = (sum.x<frag_limit) ? ac1 : ac2;
#else
    const float ac = ac1;
#endif

    // calculate pressure and sound speed
    const float pressure = a * pow(sum.DENSITY,ac);
    float ci = sqrt(ac*pressure/sum.DENSITY);

    hydro[gl_GlobalInvocationID.x] = vec4(sum.DENSITY, pressure, ci, dhDensFac);
}