#version 450 core
// we have to use a fixed work group size here

#include "common.glsl"
#include "kernel.glsl"

#define D_RHO_D_H

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

layout(local_size_x=WGSIZE,local_size_y=1,local_size_z=1) in;

uniform float heps_factor = 0.1;

shared vec4 pos[gl_WorkGroupSize.x];

// This shader updates a particles density by interacting with all other particles,
// using shared memory to speed up memory access
void main()
{
    const uint startTile = TILES_PER_THREAD * uint(gl_GlobalInvocationID.x / NUM_PARTICLES); // there can be multiple threads per particle, so where do we start calculating?

    const uint idxi = gl_GlobalInvocationID.x % NUM_PARTICLES;
    const vec4 posi = positions[idxi];
    const float hi =  smlength[idxi];

    float density =0; // lets sum up the density here
    float densityPlus =0; // needed for drho/dh
    float densityMinus =0; // needed for drho/dh

    // cache those values since we will always use the same h
    const float hi2 = hi*hi;
    const float hiPoly6Factor = poly6Factor(hi);

#ifdef D_RHO_D_H
    const float eps = hi*heps_factor;
    const float hipe = hi+eps;
    const float hime = hi-eps;
    const float hipe2 = hipe*hipe;
    const float hime2 = hime*hime;
    const float hipePoly6Factor = poly6Factor(hipe);
    const float himePoly6Factor = poly6Factor(hime);
#endif

    // loop over tiles in a row for as many tiles one thread is configured to calculate
    // calculate the interactions of a particle with gl_WorkGroupSize.x particles in one tile
    // repeat until all interactions in all tiles are calculated
    for(uint tile = 0; tile < TILES_PER_THREAD; tile++)
    {
        // fill fields in shared memory
        uint idx = gl_WorkGroupSize.x * (startTile + tile) + gl_LocalInvocationID.x;
        pos[gl_LocalInvocationID.x] = positions[idx];

        memoryBarrierShared();
        barrier();

        // calculate the row up to here
        for(uint j=0; j<gl_WorkGroupSize.x; j++)
        {
            const vec4 posj = pos[j];
            const vec3 rij = posi.xyz - posj.xyz;
            const float r2 = dot(rij,rij);

            // calculate all densities
            density +=  posj.w * (Wpoly6(r2, hiPoly6Factor, hi2));

#ifdef D_RHO_D_H
            densityPlus +=  posj.w * (Wpoly6(r2, hipePoly6Factor, hipe2));
            densityMinus +=  posj.w * (Wpoly6(r2, himePoly6Factor, hime2));
#endif

        }

        memoryBarrierShared();
        barrier();
    }

    hydro[gl_GlobalInvocationID.x] = vec4(density, densityPlus, densityMinus, eps);
}