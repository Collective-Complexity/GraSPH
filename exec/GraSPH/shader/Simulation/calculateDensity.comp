#version 450 core
// we have to use a fixed work group size here

#include "common.glsl"
#include "kernel.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

#ifdef BALSARA_SWITCH
layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocity
{
    vec4 velocity[];
};
layout(binding=PARTICLE_BALSARA_BUFFER_BINDING,std430) buffer ParticleBalsaraValues
{
    vec4 balsara[];
};
#endif

layout(local_size_x=WGSIZE,local_size_y=1,local_size_z=1) in;

uniform float heps_factor = 0.1;

shared vec4 pos[gl_WorkGroupSize.x];
#ifdef BALSARA_SWITCH
shared vec3 vel[gl_WorkGroupSize.x];
#endif

// This shader updates a particles density by interacting with all other particles,
// using shared memory to speed up memory access
void main()
{
    const uint startTile = TILES_PER_THREAD * uint(gl_GlobalInvocationID.x / NUM_PARTICLES); // there can be multiple threads per particle, so where do we start calculating?

    const uint idxi = gl_GlobalInvocationID.x % NUM_PARTICLES;
    const vec4 posi = positions[idxi];
    const float hi =  smlength[idxi];

#ifdef BALSARA_SWITCH
    const vec3 veli = velocity[idxi].VELOCITY;
#endif

    float density =0; // lets sum up the density here
    float drhodh =0; // partial derivative of density with respect to h
    float divergence =0; // the velocity divergence
    vec3 curl = vec3(0,0,0); // curl of the velocity

    // cache those values since we will always use the same h
    const float hi2 = hi*hi;
    const float hiPoly6Factor = poly6Factor(hi);

#if defined(BALSARA_SWITCH) || defined(D_RHO_D_H)
    const float hidPoly6Factor = dpoly6Factor(hi);
#endif

    // loop over tiles in a row for as many tiles one thread is configured to calculate
    // calculate the interactions of a particle with gl_WorkGroupSize.x particles in one tile
    // repeat until all interactions in all tiles are calculated
    for(uint tile = 0; tile < TILES_PER_THREAD; tile++)
    {
        // fill fields in shared memory
        uint idx = gl_WorkGroupSize.x * (startTile + tile) + gl_LocalInvocationID.x;
        pos[gl_LocalInvocationID.x] = positions[idx];
#ifdef BALSARA_SWITCH
        vel[gl_LocalInvocationID.x] = velocity[idx].VELOCITY;
#endif

        memoryBarrierShared();
        barrier();

        // calculate the row up to here
        for(uint j=0; j<gl_WorkGroupSize.x; j++)
        {
            const vec4 posj = pos[j];
            const vec3 rij = posi.POSITION - posj.POSITION;
            const float r2 = dot(rij,rij);

            // calculate the density
            const float w = Wpoly6(r2, hiPoly6Factor, hi2);
            density +=  posj.MASS * w;

#if defined(BALSARA_SWITCH) || defined(D_RHO_D_H)
            const float dw = dWpoly6(r2, hidPoly6Factor, hi2);
#endif
#ifdef D_RHO_D_H
            drhodh += -posj.MASS * ( 3.0/hi * w + 2.0*r2/(2.0*hi) * dw); // some mathematical trickery to get the partial derivative with respect to h
                                                                         // need to be changed when using different kernel
#endif
#ifdef BALSARA_SWITCH
            const vec3 velj = vel[j];
            const vec3 velij = veli - velj;
            divergence += posj.MASS * dot(velij,rij) * dw;
            curl += posj.MASS * cross(velij,rij) * dw;
#endif
        }

        memoryBarrierShared();
        barrier();
    }

    hydro[gl_GlobalInvocationID.x] = vec4(density, 0, 0, drhodh);
#ifdef BALSARA_SWITCH
    balsara[gl_GlobalInvocationID.x] = vec4(curl,divergence);
#endif
}