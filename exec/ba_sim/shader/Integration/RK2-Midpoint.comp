#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"

layout(binding=PARTICLE_BUFFER_BINDING,std430) buffer ParticleBuffer
{
    Particle particles[];
};

layout(binding=RK_MONE_BUFFER_BINDING,std430) buffer M1Buffer
{
    Particle particlesM1[];
};


layout(local_size_variable) in;

uniform uint num_of_particles;
uniform float dt;

// This shader performs a semi-implicit euler step on one particle.
void main()
{
    if(gl_GlobalInvocationID.x >= num_of_particles)
        return;

    vec4 velOld = particles[gl_GlobalInvocationID.x].velocity;
    vec4 posOld = particles[gl_GlobalInvocationID.x].position;
    vec4 accM1 = particlesM1[gl_GlobalInvocationID.x].acceleration;
    vec4 velM1 = particlesM1[gl_GlobalInvocationID.x].velocity;

    vec4 velNew = velOld + accM1 * dt;
    vec4 posNew = posOld + velM1 * dt;

    particles[gl_GlobalInvocationID.x].velocity = velNew;
    particles[gl_GlobalInvocationID.x].position = posNew;
    particles[gl_GlobalInvocationID.x].acceleration = vec4(0,0,0,0);
}