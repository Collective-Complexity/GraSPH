#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"

layout(binding=PARTICLE_BUFFER_BINDING,std430) buffer ParticleBuffer
{
    Particle particles[];
};

layout(binding=VERLET_LAST_POS_BUFFER_BINDING,std430) buffer VerletLastPositionBuffer
{
    vec4 lastPosition[];
};

layout(local_size_variable) in;

uniform uint num_of_particles;
uniform float dt;

// This shader performs a position verelt step on one particle.
// Remember to initialize the second buffer to store old positions
// and call verletFirstStep to perform the first integration step.
void main()
{
    if(gl_GlobalInvocationID.x >= num_of_particles)
        return;

    vec4 currentPos = particles[gl_GlobalInvocationID.x].position;
    vec4 lastPos = lastPosition[gl_GlobalInvocationID.x];
    vec4 acceleration = particles[gl_GlobalInvocationID.x].acceleration;

    vec4 newPos = currentPos + currentPos - lastPos + acceleration * dt*dt;

    lastPosition[gl_GlobalInvocationID.x] = currentPos;
    particles[gl_GlobalInvocationID.x].position = newPos;
    particles[gl_GlobalInvocationID.x].acceleration = vec4(0,0,0,0);
}