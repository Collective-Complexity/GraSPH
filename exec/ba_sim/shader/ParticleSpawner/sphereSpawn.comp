#version 450
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "random.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec2 hydro[];
};

layout(local_size_variable) in;

uniform vec3 center;
uniform float radius;
uniform float mass;
uniform float density;
uniform float temperature;
uniform uint num_of_particles;

uniform uint random_seed;

void main()
{
    // generate a random position
    uint seed = random_seed*gl_GlobalInvocationID.x;
    vec2 hammersley = genHammersleySet(seed, num_of_particles);
    vec3 randomPos = randSphere( hammersley.x, hammersley.y,rand(seed),radius);
    positions[gl_GlobalInvocationID.x] = vec4(randomPos + center, mass);

    // set all the attributes
    velocities[gl_GlobalInvocationID.x] = vec4(0,0,0,0);
    accelerations[gl_GlobalInvocationID.x] = vec4(0,0,0,0);
    hydro[gl_GlobalInvocationID.x] = vec2(0,0);
}
