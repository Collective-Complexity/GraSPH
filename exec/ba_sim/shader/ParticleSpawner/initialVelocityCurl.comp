#version 450
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "random.glsl"
#include "simplex.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(local_size_variable) in;


uniform float frequency=1;
uniform float scale=1;
uniform int seed=0;
uniform float eps=0.0001;

const vec3 seed3d = seed*vec3(rand(seed),rand(seed),rand(seed));

vec3 potential(vec3 pos)
{
    return vec3(
                snoise(pos*frequency + seed3d),
                snoise(pos*frequency + seed3d + vec3(250.0,850.0,450.0)),
                snoise(pos*frequency + seed3d + vec3(1020.0,4140.0,2050.0))
                );
}

void main()
{
    vec3 pos = positions[gl_GlobalInvocationID.x].xyz;
    vec3 epsX = vec3(eps,0,0);
    vec3 epsY = vec3(0,eps,0);
    vec3 epsZ = vec3(0,0,eps);

    // all the partial diveratives
    vec3 xp = potential(pos+epsX);
    vec3 xm = potential(pos-epsX);
    vec3 yp = potential(pos+epsY);
    vec3 ym = potential(pos-epsY);
    vec3 zp = potential(pos+epsZ);
    vec3 zm = potential(pos-epsZ);

    // calculate the curl
    vec3 velocity = vec3( (yp.z-ym.z) - (zp.y-zm.y), (zp.x-zm.x) - (xp.z-xm.z), (xp.y-xm.y) - (yp.x-ym.x)  )/(2*eps);

    velocities[gl_GlobalInvocationID.x] += vec4(velocity*scale,0);
}
