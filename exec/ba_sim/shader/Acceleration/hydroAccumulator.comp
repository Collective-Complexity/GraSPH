#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "mathConst.glsl"

layout(binding=PARTICLE_HYDRO_BUFFER_BINDING,std430) buffer ParticleHydro
{
    vec4 hydro[];
};

layout(binding=PARTICLE_SMLENGTH_BUFFER_BINDING,std430) buffer ParticleSmlength
{
    float smlength[];
};

uniform float k;
uniform float ac;
uniform float sink_th;

layout(local_size_variable) in;

void main()
{
    vec4 sum = vec4(0);

//    if(hydro[gl_GlobalInvocationID.x].w >0)
        for(uint i=0; i < HYDROS_PER_PARTICLE; i++)
        {
            sum += hydro[NUM_PARTICLES * i + gl_GlobalInvocationID.x];
        }

//    float isSink = (density > sink_th) ? hydro[gl_GlobalInvocationID.x].w : hydro[gl_GlobalInvocationID.x].w;

    // calculate pressure
    float pressure = k * pow(sum.y,ac);

    // calculate viscosity correction value
    float vorticity = (sum.x/sum.y);
    float divergence = (sum.z/sum.y);
    float ci = sqrt(ac*pressure/sum.y);
    float fi = divergence / (divergence + vorticity+0.001*ci/smlength[gl_GlobalInvocationID.x]);

    hydro[gl_GlobalInvocationID.x] = vec4(pressure, sum.y, fi, sum.w);
}