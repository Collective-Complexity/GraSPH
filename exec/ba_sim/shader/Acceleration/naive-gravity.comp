#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"
#include "softGravity.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(local_size_variable) in;

uniform float gravity_constant;
uniform float smoothing_epsilon_squared;

#ifdef NUM_PARTICLES
    uniform uint num_of_particles= NUM_PARTICLES;
#else
    uniform uint num_of_particles;
#endif

// This shader updates a particles acceleration by interacting with all other particles in
// a naive implementation.
void main()
{
    // cache my position in local memory
    vec4 myPosition = positions[gl_GlobalInvocationID.x];
    vec3 myAcc = vec3(0,0,0);

    // interact with all other particles
    for(uint i=0; i<num_of_particles; i++)
    {
            myAcc += interaction(myPosition, positions[i], smoothing_epsilon_squared);
    }

    // write back the acceleration
    accelerations[gl_GlobalInvocationID.x] = vec4(myAcc * gravity_constant, 0);
}