#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "datatypes.glsl"

layout(binding=PARTICLE_BUFFER_BINDING,std430) buffer ParticleBuffer
{
    Particle particles[];
};

layout(local_size_variable) in;

uniform uint numOfParticles;
uniform float gravityConstant;
uniform float smoothingEpsilonSquared;
uniform float dt;

void main()
{
    if(gl_GlobalInvocationID.x >= numOfParticles)
        return;

    vec4 acc = vec4(0,0,0,0);
    for(uint i=0; i<numOfParticles; i++)
    {
        // using the soft gravity formular from gpu gems
        vec4 p12 = particles[i].position - particles[gl_GlobalInvocationID.x].position;
        float distSquare = dot(p12,p12) + smoothingEpsilonSquared;
        float dist_3_2 = sqrt(pow(distSquare,3));
        acc += particles[gl_GlobalInvocationID.x].mass * p12  / dist_3_2;
    }
    acc *= gravityConstant;

    // integration
    particles[gl_GlobalInvocationID.x].velocity += acc * dt;
    particles[gl_GlobalInvocationID.x].position += particles[gl_GlobalInvocationID.x].velocity * dt;
}