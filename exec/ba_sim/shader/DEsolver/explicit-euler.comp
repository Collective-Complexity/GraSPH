#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(local_size_variable) in;

uniform float dt;

// This shader performs a explicit euler step on one particle.
void main()
{
    positions[gl_GlobalInvocationID.x].xyz += velocities[gl_GlobalInvocationID.x].xyz * dt;
    velocities[gl_GlobalInvocationID.x].xyz += accelerations[gl_GlobalInvocationID.x].xyz * dt;

    accelerations[gl_GlobalInvocationID.x] = vec4(0,0,0,0);
}