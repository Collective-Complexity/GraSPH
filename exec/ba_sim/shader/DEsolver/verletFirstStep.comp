#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(binding=VERLET_BUFFER_BINDING,std430) buffer VerletLastPositionBuffer
{
    vec4 lastPosition[];
};

layout(local_size_variable) in;

uniform float dt;

// This shader performs the first step of a verlet integration
void main()
{
    vec4 currentPos = positions[gl_GlobalInvocationID.x];
    vec4 velocity = velocities[gl_GlobalInvocationID.x];
    vec4 acceleration = accelerations[gl_GlobalInvocationID.x];

    vec4 newPos = currentPos + velocity * dt + 0.5f * acceleration * dt * dt;

    lastPosition[gl_GlobalInvocationID.x] = currentPos;
    positions[gl_GlobalInvocationID.x] = newPos;
    accelerations[gl_GlobalInvocationID.x] = vec4(0,0,0,0);
}