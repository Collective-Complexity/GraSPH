#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"

layout(binding=PARTICLE_POSITION_BUFFER_BINDING,std430) buffer ParticlePositions
{
    vec4 positions[];
};

layout(binding=PARTICLE_VELOCITY_BUFFER_BINDING,std430) buffer ParticleVelocities
{
    vec4 velocities[];
};

layout(binding=PARTICLE_ACCELERATION_BUFFER_BINDING,std430) buffer ParticleAccelerations
{
    vec4 accelerations[];
};

layout(local_size_variable) in;

uniform float dt;
uniform float vel_dt;

// This shader performs a leapfrog integration step on one particle.
// for the first step of the simulation set vel_dt=dt/2
// for all other steps set vel_dt=dt
// only works for fixed time steps
// is time reversible
// the leapfrog scheme:
// -------------------
// A(X_0)
// V_1/2 using A(X_0) * dt/2
// X_1 using V_1/2 * dt
// A(X_1)
// V_3/2 using A(X_1) * dt
// X_2 using V_3/2 * dt
// ------------------
// Meaning that at the end of this function call the particle state will be
// acceleration: A_i
// velocity:     V_i+1/2
// position:     X_i+1
void main()
{
    // update the velocity i-1/2 to i+1/2
    vec3 vel = velocities[gl_GlobalInvocationID.x].xyz + accelerations[gl_GlobalInvocationID.x].xyz * vel_dt;

    // update position i to i+1
    positions[gl_GlobalInvocationID.x].xyz += vel * dt;

    velocities[gl_GlobalInvocationID.x].xyz = vel;
    accelerations[gl_GlobalInvocationID.x] = vec4(0,0,0,0);
}