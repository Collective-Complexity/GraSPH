#version 450 core
#extension GL_ARB_compute_variable_group_size : require

#include "common.glsl"

layout(binding=PARTICLE_BUFFER_BINDING,std430) buffer ParticleBuffer
{
    Particle particles[];
};

layout(local_size_variable) in;

uniform float dt;
uniform float vel_dt;

// This shader performs a leapfrog integration step on one particle.
// for the first step of the simulation set vel_dt=dt/2
// for all other steps set vel_dt=dt
// only works for fixed time steps
// is time reversible
// the leapfrog scheme:
// -------------------
// A(X_0)
// V_1/2 using A(X_0) * dt/2
// X_1 using V_1/2 * dt
// A(X_1)
// V_3/2 using A(X_1) * dt
// X_2 using V_3/2 * dt
// ------------------
// Meaning that at the end of this function call the particle state will be
// acceleration: A_i
// velocity:     V_i+1/2
// position:     X_i+1
void main()
{
    // update the velocity i-1/2 to i+1/2
    particles[gl_GlobalInvocationID.x].velocity += particles[gl_GlobalInvocationID.x].acceleration * vel_dt;

    // update position i to i+1
    particles[gl_GlobalInvocationID.x].position += particles[gl_GlobalInvocationID.x].velocity * dt;

    particles[gl_GlobalInvocationID.x].acceleration = vec4(0,0,0,0);
}